while 1:
    try:
        num = int(input())
        lst = []
        tree = {}#如果parent 和 child 是以字典形式搞的，说白了这是搞字典，不是搞树 
        for _ in range(num):
            child, parent = input().split() #child parent 都是输入的，
            if parent in tree:
                tree[parent].append(child) #判断，如果parent 加过了就别加，就加child,parent is key child is value {'1': ['3', '5'], '3': ['4'], '5': ['10', '11'], '4': ['12']}tree5
            else:
                tree[parent] = [child]#判断，如果parent 没加过，就parent加child,这就容易了
            lst.append((child, parent))# 字典 和 数组 都在用循环输入的值初始化记录一样的信息
            #print(lst,end = 'shuzu') key 和 value 之间用：分隔 key 必须是唯一的
            print(tree,end="tree")


        def del_child(parent_id):
            if parent_id in tree:#搞字典就是key values,parent is key child is value,给你key (parent) 让你删除values (child) 就这，如果删的东西在，就搞，不在就不搞
                for child_id in tree.pop(parent_id):#pop 弹栈，用key然后取value值 的值,循环删除，只要还存在 就删除，
                    #print(tree.pop)
                    print(child_id,parent_id,end='***** \n')
                    lst.remove((child_id, parent_id))#数组的remove操作remove函数移除掉满足条件的第一个元素,数组 和 树的记录应该是反着的，一个a 前 b 后，一个 a 后 b 前
                    del_child(child_id)#妈的递归删除的 这是把child 当成根了，就是当parents 使用了，，递归搞了然后递归重复上面的过程， 直到没有值了搞完。


        del_id = input()#输入删除的parentd_id key
        del_child(del_id)#调用

        for c in lst:#lst 数组里面的东西是一对的，和 树的记录顺序反着，0，parents，1 child
            if c[0] != del_id:#判断如果不是需要删除的parentes 那就打印，如果是了就不打印，完了
                print(" ".join(c))#用{}的 key value 关系找，找到后就删除数组的对应的，parent ,child, 搞完数组，然后打印数组，{} 只是利用的 key value 对应的关系，然后数组哪种对应的关系，干活，remove

    except Exception:
        break
