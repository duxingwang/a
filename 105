

import json
#https://leetcode.cn/problems/generate-parentheses/solutions/194208/ru-men-ji-bie-de-hui-su-fa-xue-hui-tao-lu-miao-don/?orderBy=most_votes
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':

def stringToTreeNode(input):
    input = input.strip()
    input = input[1:-1]
    if not input:
        return None

    inputValues = [s.strip() for s in input.split(',')]
    root = TreeNode(int(inputValues[0]))
    nodeQueue = [root]
    front = 0
    index = 1
    while index < len(inputValues):
        node = nodeQueue[front]
        front = front + 1

        item = inputValues[index]
        index = index + 1
        if item != "null":
            leftNumber = int(item)
            node.left = TreeNode(leftNumber)
            nodeQueue.append(node.left)

        if index >= len(inputValues):
            break

        item = inputValues[index]
        index = index + 1
        if item != "null":
            rightNumber = int(item)
            node.right = TreeNode(rightNumber)
            nodeQueue.append(node.right)
    return root

def treeNodeToString(root):
    if not root:
        return "[]"
    output = ""
    queue = [root]
    current = 0
    while current != len(queue):
        node = queue[current]
        current = current + 1

        if not node:
            output += "null, "
            continue

        output += str(node.val) + ", "
        queue.append(node.left)
        queue.append(node.right)
    return "[" + output[:-2] + "]"

def main():
    import sys
    import io
    def readlines():
        for line in io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8'):
            yield line.strip('\n')

    lines = readlines()
    while True:
        try:
            line = next(lines)
            root = stringToTreeNode(line);
            line = next(lines)
            p = int(line);
            line = next(lines)
            q = int(line);
            
            ret = Solution().lowestCommonAncestor(root, p, q)

            out = treeNodeToString(ret);
            print(out)
        except StopIteration:
            break

if __name__ == '__main__':
    main()
class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        dummy = ListNode(0, head)
        #dummy = head
        first = head
        second = dummy
        for i in range(n):
            first = first.next
        while first:
            first = first.next
            second = second.next
        
        second.next = second.next.next
        return dummy.next

def stringToListNode(input):
    print(input)
    #numbers = json.loads(input)
    numbers = [bb for bb in input.split()]
    #print(numbers,"*1")
    #numbers = input
    dummyRoot = ListNode(0)
    ptr = dummyRoot
    for number in numbers:
        ptr.next = ListNode(number)
        ptr = ptr.next
    ptra = ptr
    #print()
    print(listNodeToString(ptra),"*3")
    #print(listNodeToString(ptra),"*3")
    ptr = dummyRoot.next
    #print()
    #print(listNodeToString(ptr),"*4")
    return ptr



def listNodeToString(node):
    if not node:
        return "[]"
    result = ""
    while node:
        result += str(node.val) + ", "
        node = node.next
    #return result[:-2]
    return result



def main():
    while True:
        try:
            head = stringToListNode(str([1,2,3,4]))
            n = 2
            ret = Solution().removeNthFromEnd(head, n)
            out = listNodeToString(ret)
            print(out)
        except StopIteration:
            break

#if __name__ == '__main__':
#    main()
main()
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        def build_tree(pre, in_order):
            '''
            解题思路：因前序遍历是按照根节点的顺序，左右分割点不清楚；而中序遍历恰好是可以找到左右分割，故本题可解
                步骤1: 先判断pre为空的情况，说明已经到底；直接返回None即可
                步骤2: 生成前前根节点
                步骤3: 对当前中序、前序以当前根节点进行左右分割
                步骤4: 深入递归下去，以链接当前根节点的左右子树
                步骤5: 返回当前的根节点给上一层
            :param pre: 前序数组
            :param in_order: 中序数组
            :return: 返回当前根节点
            '''
            if pre == []: return None
            root = TreeNode(pre[0])
            if len(pre) == 1: return root
            index = in_order.index(root.val)                                    # 找到当前根节点的索引
            inorder_left, inorder_right = in_order[:index], in_order[index+1:]  # 对中序数组以当前根节点进行左右子树的切割
            pre_left, pre_right = pre[1:len(inorder_left)+1], pre[index+1:]     # 对前序数组以当前根节点进行左右子树的切割
            root.left = build_tree(pre_left, inorder_left)
            root.right = build_tree(pre_right, inorder_right)
            return root
        return build_tree(preorder, inorder)


